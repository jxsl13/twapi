package require

import (
	"fmt"
	"runtime"
	"strings"
)

/* CallStack is necessary because the assert functions use the testing object
internally, causing it to print the file:line of the assert method, rather than where
the problem actually occurred in calling code.*/

// CallStack returns an array of strings containing the file and line number
// of each stack frame leading from the current test to the assert call that
// failed.
func CallStack() []string {

	var (
		pc   uintptr
		ok   bool
		file string
		line int
		name string
	)

	callers := []string{}
	for i := 0; ; i++ {
		pc, file, line, ok = runtime.Caller(i)
		if !ok {
			break
		}

		if file == "<autogenerated>" {
			break
		}

		f := runtime.FuncForPC(pc)
		if f == nil {
			break
		}
		name = f.Name()

		// testing.tRunner is the standard library function that calls tests.
		if name == "testing.tRunner" {
			break
		}

		parts := strings.Split(file, "/")
		if len(parts) > 1 {
			dir := parts[len(parts)-2]
			if dir != "require" {
				callers = append(callers, fmt.Sprintf("%s:%d", file, line))
			}
		}

		// Drop this package
		segments := strings.Split(name, ".")
		name = segments[len(segments)-1]
		if strings.HasPrefix(name, "Test") ||
			strings.HasPrefix(name, "Benchmark") ||
			strings.HasPrefix(name, "Example") {
			break
		}
	}

	return callers
}
